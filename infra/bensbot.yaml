apiVersion: v1
kind: ConfigMap
metadata:
  name: bensbot-config
data:
  LOG_LEVEL: "INFO"
  WATCHDOG_INTERVAL: "30"
  INITIAL_CAPITAL: "100000"
  MONGODB_DATABASE: "bensbot"
  ENABLE_PERSISTENCE: "true"
  ENABLE_WATCHDOG: "true"
  ENABLE_DYNAMIC_CAPITAL: "true"
  ENABLE_STRATEGY_RETIREMENT: "true"
  ENABLE_EXECUTION_MODEL: "true"
---
apiVersion: v1
kind: Secret
metadata:
  name: bensbot-secrets
type: Opaque
data:
  # "bensbot_api_key" base64 encoded - change in production!
  API_KEY: YmVuc2JvdF9hcGlfa2V5
  # "bensbot_secret" base64 encoded - change in production! 
  JWT_SECRET_KEY: YmVuc2JvdF9zZWNyZXQ=
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: bensbot-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: bensbot
  labels:
    app: bensbot
spec:
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  - port: 8050
    targetPort: 8050 
    name: dashboard
  selector:
    app: bensbot
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bensbot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bensbot
  template:
    metadata:
      labels:
        app: bensbot
    spec:
      containers:
      - name: bensbot
        image: bensbot:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8050
          name: dashboard
        env:
        - name: MONGODB_URI
          value: "mongodb://admin:password@mongodb:27017/?authSource=admin"
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: bensbot-secrets
              key: JWT_SECRET_KEY
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: bensbot-secrets
              key: API_KEY
        envFrom:
        - configMapRef:
            name: bensbot-config
        volumeMounts:
        - name: bensbot-data
          mountPath: /app/data
        - name: bensbot-logs
          mountPath: /app/logs
        - name: bensbot-backups
          mountPath: /app/backups
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 12  # Allow 2 minutes (12 * 10s) for startup
      volumes:
      - name: bensbot-data
        persistentVolumeClaim:
          claimName: bensbot-data-pvc
      - name: bensbot-logs
        emptyDir: {}
      - name: bensbot-backups
        emptyDir: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bensbot-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: bensbot.local  # Replace with your actual domain
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: bensbot
            port:
              number: 8000
      - path: /dashboard
        pathType: Prefix
        backend:
          service:
            name: bensbot
            port:
              number: 8050
