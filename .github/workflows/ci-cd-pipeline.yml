name: BensBot CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  # Allow manual triggering
  workflow_dispatch:

jobs:
  # Code quality and testing job
  test:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    services:
      # MongoDB service container for tests
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov pylint black isort

      - name: Check code formatting
        run: |
          black --check .
          isort --check-only --profile black .

      - name: Lint with pylint
        run: |
          pylint trading_bot/ --disable=C0103,C0111,R0903,R0913

      - name: Run unit tests
        run: |
          pytest tests/ --cov=trading_bot --cov-report=xml

      - name: Run integration tests
        run: |
          python -m tests.integration.end_to_end_test
          python end_to_end_test_scenarios.py

      - name: Run data validation tests
        run: |
          python -m tests.validation.data_validator_test

      - name: Run risk control tests
        run: |
          python -m tests.validation.kill_switch_test

      - name: Validate pre-paper trading readiness
        run: |
          ./scripts/run_preflight_checks.sh

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: coverage.xml

  # Docker build and push job
  build:
    name: Build & Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: username/bensbot
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=username/bensbot:latest
          cache-to: type=inline

  # Deployment job for develop branch
  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to staging
        run: |
          kubectl apply -f kubernetes/mongodb.yaml -n bensbot-staging
          kubectl apply -f kubernetes/bensbot.yaml -n bensbot-staging
          kubectl set image deployment/bensbot bensbot=username/bensbot:sha-${{ github.sha }} -n bensbot-staging
          kubectl rollout status deployment/bensbot -n bensbot-staging --timeout=180s

      - name: Run post-deployment tests
        run: |
          # Wait for service to be fully available
          sleep 30
          # Get service endpoint
          ENDPOINT=$(kubectl get svc bensbot -n bensbot-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          # Test health endpoint
          curl -f http://$ENDPOINT:8000/health || exit 1

      - name: Send deployment notification
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"âœ… BensBot successfully deployed to staging environment"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deployment job for main branch
  deploy-production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment: production  # Requires approval

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Deploy to production
        run: |
          kubectl apply -f kubernetes/mongodb.yaml -n bensbot-production
          kubectl apply -f kubernetes/bensbot.yaml -n bensbot-production
          kubectl set image deployment/bensbot bensbot=username/bensbot:sha-${{ github.sha }} -n bensbot-production
          kubectl rollout status deployment/bensbot -n bensbot-production --timeout=180s

      - name: Create backup before upgrade
        run: |
          # Execute backup script via kubectl
          kubectl exec -n bensbot-production \
          $(kubectl get pod -n bensbot-production -l app=mongodb -o jsonpath='{.items[0].metadata.name}') \
          -- mongodump --archive=/tmp/backup-$(date +%Y%m%d-%H%M%S).gz --gzip --db bensbot
      
      - name: Run smoke tests
        run: |
          # Wait for service to be fully available
          sleep 60
          # Get service endpoint
          ENDPOINT=$(kubectl get svc bensbot -n bensbot-production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          # Test health endpoint
          curl -f http://$ENDPOINT:8000/health || exit 1
          # Test API endpoint
          curl -f -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" http://$ENDPOINT:8000/api/v1/status || exit 1

      - name: Send deployment notification
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"ðŸš€ BensBot successfully deployed to PRODUCTION environment"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

  # Generate documentation
  docs:
    name: Generate Documentation
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pdoc3 mistune==0.8.4

      - name: Generate API documentation
        run: |
          pdoc --html --output-dir ./docs/api trading_bot

      - name: Deploy docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
