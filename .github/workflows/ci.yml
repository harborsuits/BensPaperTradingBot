name: BensBot CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.yml'
  workflow_dispatch:
    inputs:
      run_integration_tests:
        description: 'Run integration tests'
        required: false
        default: false
        type: boolean

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    services:
      # MongoDB service container for integration tests
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
      # Redis service container for integration tests
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --with dev
      
      - name: Lint with flake8
        run: |
          # stop the build if there are syntax errors or undefined names
          flake8 trading_bot --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 trading_bot --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
      
      - name: Check formatting with black
        run: |
          black --check trading_bot
      
      - name: Check imports with isort
        run: |
          isort --check-only --profile black trading_bot
      
      - name: Type checking with mypy
        run: |
          mypy trading_bot
      
      - name: Validate configuration schemas
        run: |
          python -m trading_bot.config.schema_validator
      
      - name: Run unit tests
        run: |
          pytest --cov=trading_bot tests/unit/ --cov-report=xml
      
      - name: Run integration tests
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.run_integration_tests == 'true' }}
        env:
          MONGODB_URI: mongodb://localhost:27017
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          pytest tests/integration/ --cov=trading_bot --cov-append --cov-report=xml
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      
      - name: Run security scan with bandit
        run: |
          bandit -r trading_bot -ll
      
      - name: Check dependencies with safety
        run: |
          safety check
  
  build-test-containers:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build trading bot image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: bensbot:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build dashboard image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dashboard
          push: false
          load: true
          tags: bensbot-dashboard:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test container health
        run: |
          # Create test network
          docker network create bensbot-test-network
          
          # Start MongoDB and Redis
          docker run -d --name mongodb --network bensbot-test-network -p 27117:27017 mongo:6.0
          docker run -d --name redis --network bensbot-test-network -p 6479:6379 redis:7-alpine
          
          # Wait for services to be ready
          sleep 5
          
          # Start the trading bot container in test mode
          docker run -d --name trading-bot \
            --network bensbot-test-network \
            -e MONGODB_URI=mongodb://mongodb:27017 \
            -e REDIS_HOST=redis \
            -e ENVIRONMENT=test \
            bensbot:test \
            python -m trading_bot.run_bot --validate-schema
          
          # Wait for container to complete
          sleep 5
          
          # Check trading bot exit code
          EXIT_CODE=$(docker inspect trading-bot --format='{{.State.ExitCode}}')
          if [ "$EXIT_CODE" != "0" ]; then
            echo "Trading bot container failed with exit code $EXIT_CODE"
            docker logs trading-bot
            exit 1
          fi
          
          echo "Container tests successful"
          
          # Clean up
          docker rm -f trading-bot mongodb redis
          docker network rm bensbot-test-network
