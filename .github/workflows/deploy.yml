name: Trading Bot Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Type check with mypy
        run: |
          mypy --config-file mypy.ini trading_bot/
      
      - name: Run unit tests
        run: |
          pytest tests/unit/ --cov=trading_bot --cov-report=xml
      
      - name: Run integration tests
        run: |
          pytest tests/integration/
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: true

  build:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ['trading_system', 'data_collector', 'api_server', 'monitoring_service']
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/trading-bot-${{ matrix.component }}
          tags: |
            type=sha,prefix=${{ github.ref_name }}-
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/${{ matrix.component }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development'
    needs: build
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v3
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DEV }}" > $HOME/.kube/config
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes/dev/
          kubectl rollout restart deployment/trading-bot-api-server
          kubectl rollout restart deployment/trading-bot-data-collector
          kubectl rollout restart deployment/trading-bot-trading-system
          kubectl rollout restart deployment/trading-bot-monitoring-service
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/trading-bot-api-server --timeout=300s
          kubectl rollout status deployment/trading-bot-data-collector --timeout=300s
          kubectl rollout status deployment/trading-bot-trading-system --timeout=300s
          kubectl rollout status deployment/trading-bot-monitoring-service --timeout=300s

  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" > $HOME/.kube/config
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes/staging/
          kubectl rollout restart deployment/trading-bot-api-server
          kubectl rollout restart deployment/trading-bot-data-collector
          kubectl rollout restart deployment/trading-bot-trading-system
          kubectl rollout restart deployment/trading-bot-monitoring-service
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/trading-bot-api-server --timeout=300s
          kubectl rollout status deployment/trading-bot-data-collector --timeout=300s
          kubectl rollout status deployment/trading-bot-trading-system --timeout=300s
          kubectl rollout status deployment/trading-bot-monitoring-service --timeout=300s

  deploy-prod:
    name: Deploy to Production
    if: github.event.inputs.environment == 'production'
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PROD }}" > $HOME/.kube/config
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes/prod/
          kubectl rollout restart deployment/trading-bot-api-server
          kubectl rollout restart deployment/trading-bot-data-collector
          kubectl rollout restart deployment/trading-bot-trading-system
          kubectl rollout restart deployment/trading-bot-monitoring-service
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/trading-bot-api-server --timeout=300s
          kubectl rollout status deployment/trading-bot-data-collector --timeout=300s
          kubectl rollout status deployment/trading-bot-trading-system --timeout=300s
          kubectl rollout status deployment/trading-bot-monitoring-service --timeout=300s 